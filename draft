import time
import datetime
import config
import requests
#import logging
from binance.client import Client
from collections import OrderedDict
# from utils.mysql import MySqlOperation

#constants
PRESENT_DATE = datetime.date.today() #'%Y-%m-%d'
UTC_INTERVALS = {'minute' : 60, 'hour' : 3600, 'day' : 86400, 'week' : 604800}

KRAKEN_PUBLIC_SERVER = 'https://api.kraken.com/0/public'
KRAKEN_METHODS = {'tickers' : '/AssetPairs', 'history' : '/OHLC', 'ticker_stat_24h' : '/Ticker'}
KRAKEN_INTERVALS = {'minute' : 1, 'hour' : 60, 'day' : 1440, 'week' : 10080, 'year' : 21600}
KRAKEN_NAME = 'Kraken'

BINANCE_PUBLIC_SERVER = 'https://api.binance.com'
BINANCE_METHODS = {'tickers' : '/api/v3/ticker/price', 'history' : '/api/v1/klines'}
BINANCE_NAME = 'Binance'

#PANDAS_DATASOURCES = ('iex', 'yahoo', 'robinhood', 'quandl')

MAIN_TICKERS = {BINANCE_NAME : ('BTCUSDT', 'ETHUSDT', 'LTCUSDT', 'XRPUSDT', 'EOSUSDT', 'XLMUSDT', 'ADAUSDT', 'BCHABCUSDT'), KRAKEN_NAME : ('XXBTZUSD', 'XETHZUSD', 'XLTCZUSD', 'XXRPZUSD', 'EOSUSD', 'XXLMZUSD', 'ADAUSD', 'BCHUSD')}

INDICATORS = ('ADX', 'RSI', 'MACD', 'ATR')

#config part
CONF_LOG_FILENAME = config.Main.log_filename
CONF_API_KEY = config.Binance.api_key
CONF_SECRET_KEY = config.Binance.api_secret
CONF_TIMEOUT = config.Main.timeout
# CONF_BINANCE_PAIRS = config.Binance.pairs
# CONF_MYSQL_HOST = config.MySqlConfig.host
# CONF_MYSQL_USER = config.MySqlConfig.mysql_user
# CONF_MYSQL_PASS = config.MySqlConfig.mysql_pass
# CONF_MYSQL_DB = config.MySqlConfig.db
# CONF_MYSQL_HISTORY_TRUNCATE = config.MySqlConfig.sql_history_truncate
# CONF_MYSQL_HISTORY_INSERT = config.MySqlConfig.sql_history_insert

#log settings

# logging.basicConfig(level = logging.DEBUG, format = u'[%(asctime)-4s]%(process)s %(levelname)-4s %(messages)s', filename = CONF_LOG_FILENAME)

#init Binance client
client = Client(CONF_API_KEY, CONF_SECRET_KEY)
BINANCE_INTERVALS = {'minute' : client.KLINE_INTERVAL_1MINUTE, 'hour' : client.KLINE_INTERVAL_1HOUR, 'day' : client.KLINE_INTERVAL_1DAY, 'week' : client.KLINE_INTERVAL_1WEEK, 'month' : client.KLINE_INTERVAL_1MONTH}

#####################################################DATETIME CONVERSIONS###########################################################

#input: datetime, not a string!, year_shift (int), month_shift (int)
#output: datetime, not a string!
def get_shifted_from_datetime_to_past(present_date, year_shift, month_shift):
  m_shift = max(0, min(month_shift, 11))
  cur_month = present_date.month
  cur_year = present_date.year
  shifted_month = lambda x, y: x if x > y else x - y + 12
  shifted_year = lambda x, y, z: x if y > z else x - 1
  output_date = datetime.date(shifted_year(cur_year, cur_month, m_shift), shifted_month(cur_month, m_shift), present_date.day)
  return output_date

#input: datetime, not a string!
#output: unix time (int)
def convert_datetime_to_timestamp(dt):
  output_utime = int(datetime.datetime.strptime(str(dt), '%Y-%m-%d').timestamp())
  return output_utime

#input: datetime, not a string!
#output: pandas date format (string)
def convert_datetime_to_pandas(dt):
  pandas_date = dt.strftime('%m/%d/%Y')
  return pandas_date

#input: unix time (int), shift_list = (day, hour, minute)
#output: unix time (int)
def shift_utime_to_past(utime, shift_list):
  total_shift = (shift_list[0] * 86400) + (shift_list[1] * 3600) + (shift_list[2] * 60)
  res_utime = utime - total_shift
  return res_utime

def convert_Binance_timestamp_to_date_string(utime_msec):
  time = int(utime_msec / 1000)
  output_utime = datetime.datetime.utcfromtimestamp(time).strftime('%Y-%m-%d %H:%M:%S')
  return output_utime

######################################################EXTERNAL REQUESTS###########################################
#Request external sources
def get_ext_sources_data(api_url, source_name, method=None, opt_params=None, **data_dict):
  req_url = api_url
  if method:
    req_url += method
  response = requests.get(req_url, opt_params, **data_dict)
  if response.status_code == requests.codes.ok:
    resp_result = response.json()
    # logging.info('Connect to %s: success'%source_name)
    return resp_result
  else:
    # logging.info('Connect to %s: failure'%source_name)
    # logging.info('Connect to %s: error %d'%(source_name, response.status_code))
    return response.status_code

########################################################INDICATORS#############################################

def smooth_values_Wilder_method(cur_list):
  cur_list_len = len(cur_list)
  first_val = sum(cur_list)
  new_list = [first_val]
  for i in range(len(cur_list)):
    next_val = new_list[i] - (new_list[i] / (cur_list_len + 1)) + cur_list[i]
    new_list.append(next_val)
  return new_list

def smooth_ADX14_Wilder_method(cur_list):
  cur_list_len = len(cur_list)
  first_val = sum(cur_list) / cur_list_len
  new_list = [first_val]
  for i in range(len(cur_list)):
    next_val = ((new_list[i] * (cur_list_len - 1)) + cur_list[i]) / cur_list_len
    new_list.append(next_val)
  return new_list

#ADX meaning
#1. Trend direction 2. Strength of trend
#Trend indicator
#ADX limits: 0 - 100
# VALUES of ADX
#  1. 0-10 -- Barely breathing -- NO TRADE
#  2. 10-20 -- Weak Trend -- Trade (Range / Pre-Breakout)
#  3.  20-30 -- Potentially Starting To Trend -- Trade (Early Stage Trend)
#  4.  30-50  -- Heating Up -- Trade (Ride The Wave)
#  5.  50-75 -- Watch Out  -- NO TRADE
#  6.  75-100 -- On Fire -- NO TRADE
# Profitable if 1. High Volume 2. Not too high volatility
def calculate_ADX14_test():
  highs_list =[46.68, 46.59, 46.88, 46.81, 46.74, 47.08, 46.84, 45.81, 45.13, 44.96, 45.01, 45.67, 45.71, 45.35]
  lows_list = [46.10, 46.14, 46.39, 46.41, 45.94, 46.68, 46.17, 45.10, 44.35, 44.61, 44.20, 44.93, 45.01, 44.46]
  close_list =[46.56, 46.36, 46.83, 46.72, 46.65, 46.97, 46.56, 45.29, 44.94, 44.62, 44.70, 45.27, 45.44, 44.76]
  cur_high_minus_prior_high = [x - y for x, y in zip(highs_list[1:], highs_list)]
  prior_low_minus_cur_low = [x - y for x, y in zip(lows_list, lows_list[1:])]
  dm_plus_list = [max(x, 0) if x > y else 0 for x, y in zip(cur_high_minus_prior_high, prior_low_minus_cur_low)]
  dm_minus_list = [max(y, 0) if x < y else 0 for x, y in zip(cur_high_minus_prior_high, prior_low_minus_cur_low)]
  highs_minus_lows_list = [x - y for x, y in zip(highs_list, lows_list)]
  high_minus_pr_close_list = [abs(x - y) for x, y in zip(highs_list[1:], close_list)]
  low_minus_pr_close_list = [abs(x - y) for x, y in zip(lows_list[1:], close_list)]
  tr_list = [max(x, y, z) for x, y, z in zip(highs_minus_lows_list[1:], high_minus_pr_close_list, low_minus_pr_close_list)]
  #NOT SURE FROM THIS POINT
  tr14_list = smooth_values_Wilder_method(tr_list)
  dm14_pl_list = smooth_values_Wilder_method(dm_plus_list)
  dm14_m_list = smooth_values_Wilder_method(dm_minus_list)
  di_plus_list = [((x / y) * 100) for x, y in zip(dm14_pl_list, tr14_list)]
  di_minus_list = [((x / y) * 100) for x, y in zip(dm14_m_list, tr14_list)]
  dx_i_list = [abs(((x - y) / (x + y)) * 100) for x, y in zip(di_plus_list, di_minus_list)]
  adx14_list = smooth_ADX14_Wilder_method(dx_i_list[1:])
  return adx14_list

def calculate_DM_PLUS(h_list, l_list):
  highs_list = h_list[-14:]
  lows_list = l_list[-14:]
  cur_high_minus_prior_high = [x - y for x, y in zip(highs_list[1:], highs_list)]
  prior_low_minus_cur_low = [x - y for x, y in zip(lows_list, lows_list[1:])]
  dm_plus_list = [max(x, 0) if x > y else 0 for x, y in zip(cur_high_minus_prior_high, prior_low_minus_cur_low)]
  return dm_plus_list

def calculate_DM_MINUS(h_list, l_list):
  highs_list = h_list[-14:]
  lows_list = l_list[-14:]
  cur_high_minus_prior_high = [x - y for x, y in zip(highs_list[1:], highs_list)]
  prior_low_minus_cur_low = [x - y for x, y in zip(lows_list, lows_list[1:])]
  dm_minus_list = [max(y, 0) if x < y else 0 for x, y in zip(cur_high_minus_prior_high, prior_low_minus_cur_low)]
  return dm_minus_list

def calculate_TR(h_list, l_list, c_list):
  highs_list = h_list[-14:]
  lows_list = l_list[-14:]
  close_list = c_list[-14:]
  highs_minus_lows_list = [x - y for x, y in zip(highs_list, lows_list)]
  high_minus_pr_close_list = [abs(x - y) for x, y in zip(highs_list[1:], close_list)]
  low_minus_pr_close_list = [abs(x - y) for x, y in zip(lows_list[1:], close_list)]
  tr_list = [max(x, y, z) for x, y, z in zip(highs_minus_lows_list[1:], high_minus_pr_close_list, low_minus_pr_close_list)]
  return tr_list

#RSI meaning
#Speed and change of price movements
#Trend indicator
#RSI limits: 0 - 100
#OVERBOUGHT above 70
#OVERSOLD below 30
def calculate_RSI14(c_list):
  close_list = c_list[-14:]
  cur_close_minus_prior_close = [x - y for x, y in zip(close_list[1:], close_list)]
  gains_list = [x if x > 0 else 0 for x in cur_close_minus_prior_close]
  loss_list = [abs(x) if x < 0 else 0 for x in cur_close_minus_prior_close]
  gains_loss_len = len(cur_close_minus_prior_close)
  first_avg_gain = sum(gains_list) / len(gains_list)
  avg_gain_list = [first_avg_gain]
  for i in range(len(gains_list)):
    next_val = ((avg_gain_list[i] * gains_loss_len) + gains_list[i]) / (gains_loss_len + 1)
    avg_gain_list.append(next_val)
  first_avg_loss = sum(loss_list) / len(loss_list)
  avg_loss_list = [first_avg_loss]
  for i in range(len(loss_list)):
    next_val = ((avg_loss_list[i] * gains_loss_len) + loss_list[i]) / (gains_loss_len + 1)
    avg_loss_list.append(next_val)
  rs_list = [x / y for x, y in zip(avg_gain_list, avg_loss_list)]
  rsi_list = [100 - (100 / (1 + x)) for x in rs_list]
  return rsi_list

#ATR meaning
#Volatility
def calculate_ATR14(h_list, l_list, c_list):
  highs_list = h_list[-14:]
  lows_list = l_list[-14:]
  close_list = c_list[-14:]
  cur_high_minus_prior_high = [x - y for x, y in zip(highs_list[1:], highs_list)]
  prior_low_minus_cur_low = [x - y for x, y in zip(lows_list, lows_list[1:])]
  dm_plus_list = [max(x, 0) if x > y else 0 for x, y in zip(cur_high_minus_prior_high, prior_low_minus_cur_low)]
  dm_minus_list = [max(y, 0) if x < y else 0 for x, y in zip(cur_high_minus_prior_high, prior_low_minus_cur_low)]
  highs_minus_lows_list = [x - y for x, y in zip(highs_list, lows_list)]
  high_minus_pr_close_list = [abs(x - y) for x, y in zip(highs_list[1:], close_list)]
  low_minus_pr_close_list = [abs(x - y) for x, y in zip(lows_list[1:], close_list)]
  tr_list = [max(x, y, z) for x, y, z in zip(highs_minus_lows_list[1:], high_minus_pr_close_list, low_minus_pr_close_list)]
  tr_list_len = len(tr_list)
  first_val = highs_list[0] - lows_list[0]
  atr_list = [first_val]
  for i in range(len(tr_list)):
    next_val = ((atr_list[i] * tr_list_len) + tr_list[i]) / (tr_list_len + 1)
    atr_list.append(next_val)
  return atr_list
  
def calculate_SMA(num_periods, close_list):
  sma_list = []
  end_slice = num_periods - 1
  for i in range(len(close_list[:-end_slice])):
    new_val = sum(close_list[i:i+num_periods]) / num_periods
    sma_list.append(new_val)
  return sma_list

def calculate_EMA(num_periods, close_list):
  prev_ema = sum(close_list[:num_periods]) / num_periods
  end_slice = num_periods + 1
  multiplier = 2 / end_slice
  ema_list = [prev_ema]
  for i in range(len(close_list[:-end_slice])):
    new_val = ((close_list[i+end_slice] - ema_list[i]) * multiplier) + ema_list[i]
    ema_list.append(new_val)
  return ema_list

########################################################BINANCE#############################################

def get_Binance_OHLC_data(ticker, interval, start_time=None, end_time=None, limit=None): #limit (default 500, max 1000)
  add_data = OrderedDict([('symbol', ticker),('interval', interval),('startTime', start_time),('endTime', end_time),('limit', limit)])
  bn_req = get_ext_sources_data(BINANCE_PUBLIC_SERVER, BINANCE_NAME, method=BINANCE_METHODS['history'], opt_params=add_data)
  return bn_req

#Get historical data from Binance
#utc_shift = shift to past in seconds
def get_Binance_historical_klines(dt_end, interval_str, utc_shift, lim=None):
  end = convert_datetime_to_timestamp(dt_end)
  end_msec = end * 1000
  start = end - utc_shift
  start_msec = start * 1000
  output_dict = {}
  for ticker in range(len(MAIN_TICKERS[BINANCE_NAME])):
    req = get_Binance_OHLC_data(MAIN_TICKERS[BINANCE_NAME][ticker], BINANCE_INTERVALS[interval_str], start_time=start_msec, end_time=end_msec, limit=lim)
    output_dict.update({MAIN_TICKERS[BINANCE_NAME][ticker] : req})
  return output_dict

def get_Binance_main_prices():
  bn_req = client.get_all_tickers()
  prices_dict = {}
  for i in range(len(bn_req)):
    if bn_req[i]['symbol'] in MAIN_TICKERS[BINANCE_NAME]:
      price = round(float(bn_req[i]['price']), 8)
      prices_dict.update({bn_req[i]['symbol'] : price})
  return prices_dict
  
def get_Binance_tickers():
  bn_req = client.get_all_tickers()
  tickers_list = []
  for i in range(len(bn_req)):
    tickers_list.append(bn_req[i]['symbol'])
  return tickers_list

#######################################################KRAKEN####################################################

#Get historical data from Kraken
def get_Kraken_OHLC_data(ticker, interval, since=None):
  add_data = OrderedDict([('pair', ticker),('interval', interval)])
  kr_req = get_ext_sources_data(KRAKEN_PUBLIC_SERVER, KRAKEN_NAME, method=KRAKEN_METHODS['history'], opt_params=add_data)
  return kr_req

#tickers - 1 or many as comma-separated string
def get_Kraken_ticker_stat_24h(tickers):
  add_data = {'pair' : tickers}
  kr_req = get_ext_sources_data(KRAKEN_PUBLIC_SERVER, KRAKEN_NAME, method=KRAKEN_METHODS['ticker_stat_24h'], opt_params=add_data)
  return kr_req

def get_Kraken_tickers():
  kr_req = get_ext_sources_data(KRAKEN_PUBLIC_SERVER, KRAKEN_NAME, method=KRAKEN_METHODS['tickers'])
  res_list = [x for x in kr_req['result'].keys() if x.find('.') == -1]
  return res_list

def make_kraken_binance_intersection_list(kraken_list, binance_list):
  kraken_list.extend(binance_list)
  new_list = set([x for x in kraken_list if kraken_list.count(x) > 1])
  return list(new_list)

#######################################################MAIN CYCLE########################################################
def main_cycle():
  binance_status = client.get_system_status()
  # logging.info('Get status from binance server')
  # logging.info('Binance server status is %s'%binance_status['msg'])
  if binance_status['status'] == 0:
    full_stats_24h_list = client.get_ticker() #all tickers full stats 24h
  else:
    # logging.info('Prices on Binance isn\'t available')
    pass

if __name__ == '__main__':
  while True:
    main_cycle()
    time.sleep(CONF_TIMEOUT) #delay
