import time
import config
import requests
#import logging
from binance.client import Client

#constants
KRAKEN_PUBLIC_SERVER = 'https://api.kraken.com/0/public'
KRAKEN_METHODS = {'tickers' : '/AssetPairs', 'history' : '/OHLC'}
KRAKEN_INTERVALS = {'minute' : 1, 'hour' : 60, 'day' : 1440, 'week' : 10080, 'year' : 21600}
KRAKEN_NAME = 'Kraken'

INDICATORS = ('ADX', 'RSI', 'MACD', 'ATR')
EXT_SOURCE_URLS = ('First', 'Second', 'etc') #In case we need them

#config part
CONF_LOG_FILENAME = config.Main.log_filename
CONF_API_KEY = config.Binance.api_key
CONF_SECRET_KEY = config.Binance.api_secret
CONF_TIMEOUT = config.Main.timeout

#log settings

# logging.basicConfig(level = logging.DEBUG, format = u'[%(asctime)-4s]%(process)s %(levelname)-4s %(messages)s', filename = CONF_LOG_FILENAME)

#init client
client = Client(CONF_API_KEY, CONF_SECRET_KEY)
BINANCE_INTERVALS = {'minute' : client.KLINE_INTERVAL_1MINUTE, 'hour' : client.KLINE_INTERVAL_1HOUR, 'day' : client.KLINE_INTERVAL_1DAY, 'week' : client.KLINE_INTERVAL_1WEEK, 'month' : client.KLINE_INTERVAL_1MONTH}

#Request external sources
def get_ext_sources_data(api_url, source_name, method=None, opt_params=None, **data_dict):
  req_url = api_url
  if method:
    req_url += method
  response = requests.get(req_url, opt_params, **data_dict)
  if response.status_code == requests.codes.ok:
    resp_result = response.json()
    # logging.info('Connect to %s: success'%source_name)
    return resp_result
  else:
    # logging.info('Connect to %s: failure'%source_name)
    # logging.info('Connect to %s: error %d'%(source_name, response.status_code))
    return response.status_code

#Get historical data from Kraken
def get_Kraken_OHLC_data(ticker, interval, since=None):
  add_data = OrderedDict([('pair', ticker),('interval', interval)])
  kr_req = get_ext_sources_data(KRAKEN_PUBLIC_SERVER, KRAKEN_NAME, method=KRAKEN_METHODS['history'], opt_params=add_data)
  return kr_req

def get_Kraken_tickers():
  kr_req = get_ext_sources_data(KRAKEN_PUBLIC_SERVER, KRAKEN_NAME, method=KRAKEN_METHODS['tickers'])
  res_list = [x for x in kr_req['result'].keys() if x.find('.') == -1]
  return res_list

def get_Binance_tickers():
  bn_req = client.get_all_tickers()
  tickers_list = []
  for i in range(len(bn_req)):
    tickers_list.append(bn_req[i]['symbol'])
  return tickers_list

def make_kraken_binance_intersection_list(kraken_list, binance_list):
  kraken_list.extend(binance_list)
  new_list = set([x for x in kraken_list if kraken_list.count(x) > 1])
  return list(new_list)

#main cycle
def main_cycle():
  binance_status = client.get_system_status()
  # logging.info('Get status from binance server')
  # logging.info('Binance server status is %s'%binance_status['msg'])
  if binance_status['status'] == 0:
    full_stats_24h_list = client.get_ticker() #all tickers full stats 24h
  else:
    # logging.info('Prices on Binance isn\'t available')
    pass

if __name__ == '__main__':
  while True:
    main_cycle()
    time.sleep(CONF_TIMEOUT) #delay
