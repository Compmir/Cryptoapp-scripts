import time
import config
import requests
#import logging
from binance.client import Client

#constants
INDICATORS = ('ADX', 'RSI', 'MACD', 'ATR')
EXT_SOURCE_URLS = ('First', 'Second', 'etc') #In case we need them

#config part
CONF_LOG_FILENAME = config.Main.log_filename
CONF_API_KEY = config.Binance.api_key
CONF_SECRET_KEY = config.Binance.api_secret
CONF_TIMEOUT = config.Main.timeout

#log settings

# logging.basicConfig(level = logging.DEBUG, format = u'[%(asctime)-4s]%(process)s %(levelname)-4s %(messages)s', filename = CONF_LOG_FILENAME)

#init client
client = Client(CONF_API_KEY, CONF_SECRET_KEY)
KLINE_INTERVALS = (client.KLINE_INTERVAL_1MINUTE, client.KLINE_INTERVAL_1HOUR, client.KLINE_INTERVAL_1DAY, client.KLINE_INTERVAL_1MONTH)

#Request external sources
def get_ext_sources_data(api_url, opt_params=None, **data_dict):
  response = requests.get(api_url, opt_params, **data_dict)
  return response.json()

#main cycle
def main_cycle():
  binance_status = client.get_system_status()
  # logging.info('Get status from binance server')
  # logging.info('Binance server status is %s'%binance_status['msg'])
  if binance_status['status'] == 0:
    full_stats_24h_list = client.get_ticker() #all tickers full stats 24h
  else:
    # logging.info('Prices on Binance isn\'t available')
    pass

if __name__ == '__main__':
  while True:
    main_cycle()
    time.sleep(CONF_TIMEOUT) #delay
