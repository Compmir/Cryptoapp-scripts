import datetime
import time
import MySQLdb
import config
import uuid

CONF_MYSQL_HOST = config.MySqlConfig.host
CONF_MYSQL_USER = config.MySqlConfig.mysql_user
CONF_MYSQL_PASS = config.MySqlConfig.mysql_passwd
CONF_MYSQL_DB = config.MySqlConfig.db

BOTS_COLUMNS = ('user', 'account', 'access', 'strategy', 'enabled', 'balance_total', 'balance_allowed', 'amount_first_order', 'amount_percent_multiplier', 'order_num_current', 'order_num_current_limit', 'percent_sell_if_above', 'percent_buy_if_below', 'pair', 'pair_x_symbol', 'pair_y_symbol', 'x_symbol_balance_total', 'price_current', 'price_first_order', 'buys_amount_total', 'buys_quantity_total', 'last_order_amount', 'last_step_percent', 'profit')
TRANSACTIONS_COLUMNS = ('date', 'user', 'account', 'type', 'symbol', 'amount', 'balance', 'comment') #comment -- order id or txID

#input: strategy (string)
#output: 2 lists of tuples
def mysql_db_get_data_from_bots(strategy):
  table_name = 'bots'
  results_from_bots_list = []
  first_trade_list = []
  try:
    db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
    cursor = db.cursor()
    sql = 'SELECT {0} FROM {1} WHERE enabled = %s AND strategy = %s'.format(', '.join('{}'.format(BOTS_COLUMNS[i]) for i in range(len(BOTS_COLUMNS))), table_name)
    q_tuple = (1, strategy)
    try:
      cursor.execute(sql, q_tuple)
      results = cursor.fetchall()
      for row in results:
        if row[9] == 0: #order_num_current
          first_trade_list.append(row)
        else:
          results_from_bots_list.append(row)
    except:
      print ('Error: unable to fetch data from %s table'%table_name)
      # logging.info('Error: unable to fetch data from %s table'%table_name)
    cursor.close()
    db.close()
    return first_trade_list, results_from_bots_list
  except (MySQLdb.Error, MySQLdb.Warning) as e:
    print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
    # logging.info('Connect to MSQL database error: %d (%s)'%(e.args[0],e.args[1])
    #return e.args[0]

#if order_num_current > 0 -- process them here
#input: bots_list (list of rows (tuples) from bots table)
def process_auto_trade(bots_list):
  if bots_list:
    table_name = 'transactions'
    main_table_name = 'bots'
    try:
      db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
      cursor = db.cursor()
      for i in range(len(bots_list)):
        user = bots_list[i][0]
        account = bots_list[i][1]
        access = bots_list[i][2]
        strategy = bots_list[i][3]
        enabled = bots_list[i][4]
        balance_total = bots_list[i][5] #Y BALANCE OF X/Y PAIR
        balance_allowed = bots_list[i][6] #Y BALANCE OF X/Y PAIR LIMIT FOR TRADE
        amount_first_order = bots_list[i][7]
        amount_percent_multiplier = bots_list[i][8]
        order_num_current = bots_list[i][9] #ORDERS EXECUTED IN SINGLE CYCLE (int)
        order_num_current_limit = bots_list[i][10] #MAX ORDERS TOTAL (int)
        percent_sell_if_above = bots_list[i][11] #POSITIVE PERCENTAGE VALUE (XX.YY%)
        percent_buy_if_below = bots_list[i][12] # NEGATIVE PERCENTAGE VALUE (-XX.YY%)
        pair = bots_list[i][13]
        pair_x_symbol = bots_list[i][14] # X SYMBOL OF X/Y PAIR
        pair_y_symbol = bots_list[i][15] # Y SYMBOL OF X/Y PAIR
        x_symbol_balance_total = bots_list[i][16] #X BALANCE OF X/Y PAIR
        price_current = bots_list[i][17] 
        price_first_order = bots_list[i][18]
        buys_amount_total = bots_list[i][19]
        buys_quantity_total = bots_list[i][20]
        last_order_amount = bots_list[i][21]
        last_step_percent = bots_list[i][22]
        profit = bots_list[i][23] # Amount of Y symbol (decimal(20,8))
        if balance_total < balance_allowed:
          balance_allowed = balance_total
        #Calculations from here
        price_deviation_percent = ((price_current - price_first_order) * 100) / price_first_order
        print ('Current price deviation: %f'%price_deviation_percent)
        print ('BUY if below: %f'%last_step_percent)
        print ('SELL if above: %f'%percent_sell_if_above)
        if price_deviation_percent < last_step_percent and order_num_current < order_num_current_limit: #price too low and num executed orders below limit
          #Create new order here (BUY, order_quantity)
          cur_utime = int(time.time())
          cur_date_string = datetime.datetime.utcfromtimestamp(cur_utime).strftime('%Y-%m-%d %H:%M:%S')
          print ('Price is below last_step_percent. Time: %s'%cur_date_string) #test
          cur_utime_msec = int(time.time() * 1000)
          order_amount = round(last_order_amount + ((last_order_amount / 100) * amount_percent_multiplier), 8)
          buys_amount_total = round(buys_amount_total + order_amount, 8)
          if balance_allowed >= buys_amount_total:
            print ('We have enough balance. BUY. Time: %s'%cur_date_string) #test
            order_quantity = round(order_amount / price_current, 8)
            x_symbol_balance_total += order_quantity
            order_num_current += 1
            new_balance = round(balance_total - order_amount, 8)
            # new_balance_allowed = round(balance_allowed - order_amount, 8)
            buys_quantity_total = round(buys_quantity_total + order_quantity, 8)
            # new_amount_percent_multiplier = round(amount_percent_multiplier + order_num_current, 2)
            last_step_percent += percent_buy_if_below
            print ('BUY PRICE: %f'%price_current) #test
            print ('BUY QUANTITY (X): %f'%order_quantity) #test
            print ('BUY AMOUNT (Y): %f'%order_amount) #test
            # print ('NEW amount_percent_multiplier: %f'%new_amount_percent_multiplier) #test
            print ('NEW last_step_percent: %f'%last_step_percent) #test
            print ('NEW BALANCE: %f'%new_balance) #test
            sql = 'UPDATE bots SET balance_total = %s, x_symbol_balance_total = %s, order_num_current = %s, last_order_amount = %s, last_step_percent = %s, buys_quantity_total = %s, buys_amount_total = %s WHERE user = %s AND account = %s AND strategy = %s AND enabled = %s'
            val_tuple = (new_balance, x_symbol_balance_total, order_num_current, order_amount, last_step_percent, buys_quantity_total, buys_amount_total, user, account, strategy, enabled)
            try:
              cursor.execute(sql, val_tuple)
              db.commit()
              #TRANSACTIONS HISTORY BEGIN
              new_order_id = 'Order ID: %s'%uuid.uuid4().hex.upper()[0:8] #RANDOM ID FOR TESTS #new_order['clientOrderId']
              sql = 'INSERT INTO {0} ({1}) VALUES ({2})'.format(table_name, ', '.join('{}'.format(TRANSACTIONS_COLUMNS[i]) for i in range(len(TRANSACTIONS_COLUMNS))), ', '.join('{}'.format('%s') for i in range(len(TRANSACTIONS_COLUMNS))))
              val_tuple = (cur_date_string, user, account, 'SELL', pair_y_symbol, order_amount, new_balance, new_order_id)
              try:
                cursor.execute(sql, val_tuple)
                db.commit()
              except (MySQLdb.Error, MySQLdb.Warning) as e:
                db.rollback()
                print ('Error: unable to insert data into %s table'%table_name)
                print(e.args[0],e.args[1])
                # logging.info('Error: unable to insert data into %s table'%table_name)
              sql = 'INSERT INTO {0} ({1}) VALUES ({2})'.format(table_name, ', '.join('{}'.format(TRANSACTIONS_COLUMNS[i]) for i in range(len(TRANSACTIONS_COLUMNS))), ', '.join('{}'.format('%s') for i in range(len(TRANSACTIONS_COLUMNS))))
              val_tuple = (cur_date_string, user, account, 'BUY', pair_x_symbol, order_quantity, x_symbol_balance_total, new_order_id)
              try:
                cursor.execute(sql, val_tuple)
                db.commit()
              except (MySQLdb.Error, MySQLdb.Warning) as e:
                db.rollback()
                print ('Error: unable to insert data into %s table'%table_name)
                print(e.args[0],e.args[1])
                # logging.info('Error: unable to insert data into %s table'%table_name
              #TRANSACTIONS HISTORY END
            except (MySQLdb.Error, MySQLdb.Warning) as e:
              db.rollback()
              print ('Error: unable to update data in %s table'%main_table_name)
              print(e.args[0],e.args[1])
        elif price_deviation_percent > percent_sell_if_above:
          #Create new order here (SELL, MARKET, sell_quantity)
          cur_utime = int(time.time())
          cur_date_string = datetime.datetime.utcfromtimestamp(cur_utime).strftime('%Y-%m-%d %H:%M:%S')
          sell_price = price_current # for tests; sell price can be different
          sell_quantity = buys_quantity_total
          print ('Price is above percent_sell_if_above. SELL. Time: %s'%cur_date_string) #test
          print ('SELL PRICE: %f'%sell_price) #test
          print ('SELL QUANTITY: %f'%sell_quantity) #test
          sell_amount = round(sell_quantity * sell_price, 8) #calculate sell amount (sell_quantity * sell_price)
          print ('SELL AMOUNT: %f'%sell_amount) #test
          new_balance = round(balance_total + sell_amount, 8)
          print ('NEW BALANCE: %f'%new_balance) #test
          current_profit = round(sell_amount - buys_amount_total, 8)
          print ('Current profit (Y): %f'%current_profit) #test
          # percent_profit_current = ((sell_amount - buys_amount_total) * 100) / buys_amount_total
          # new_profit = round(percent_profit + percent_profit_current, 2)
          last_step_percent = percent_buy_if_below
          buys_quantity_total = 0.0
          buys_amount_total = 0.0
          profit += current_profit
          x_symbol_balance_total -= sell_quantity
          sql = 'UPDATE bots SET balance_total = %s, x_symbol_balance_total = %s, order_num_current = %s, profit = %s, last_step_percent = %s, buys_quantity_total = %s, buys_amount_total = %s WHERE user = %s AND account = %s AND strategy = %s AND enabled = %s'
          val_tuple = (new_balance, x_symbol_balance_total, 0, profit, last_step_percent, buys_quantity_total, buys_amount_total, user, account, strategy, enabled)
          try:
            cursor.execute(sql, val_tuple)
            db.commit()
            #TRANSACTIONS HISTORY BEGIN
            new_order_id = 'Order ID: %s'%uuid.uuid4().hex.upper()[0:8] #RANDOM ID FOR TESTS #new_order['clientOrderId']
            sql = 'INSERT INTO {0} ({1}) VALUES ({2})'.format(table_name, ', '.join('{}'.format(TRANSACTIONS_COLUMNS[i]) for i in range(len(TRANSACTIONS_COLUMNS))), ', '.join('{}'.format('%s') for i in range(len(TRANSACTIONS_COLUMNS))))
            val_tuple = (cur_date_string, user, account, 'BUY', pair_y_symbol, sell_amount, new_balance, new_order_id)
            try:
              cursor.execute(sql, val_tuple)
              db.commit()
            except (MySQLdb.Error, MySQLdb.Warning) as e:
              db.rollback()
              print ('Error: unable to insert data into %s table'%table_name)
              print(e.args[0],e.args[1])
              # logging.info('Error: unable to insert data into %s table'%table_name)
            sql = 'INSERT INTO {0} ({1}) VALUES ({2})'.format(table_name, ', '.join('{}'.format(TRANSACTIONS_COLUMNS[i]) for i in range(len(TRANSACTIONS_COLUMNS))), ', '.join('{}'.format('%s') for i in range(len(TRANSACTIONS_COLUMNS))))
            val_tuple = (cur_date_string, user, account, 'SELL', pair_x_symbol, sell_quantity, x_symbol_balance_total, new_order_id)
            try:
              cursor.execute(sql, val_tuple)
              db.commit()
            except (MySQLdb.Error, MySQLdb.Warning) as e:
              db.rollback()
              print ('Error: unable to insert data into %s table'%table_name)
              print(e.args[0],e.args[1])
              # logging.info('Error: unable to insert data into %s table'%table_name)
            #TRANSACTIONS HISTORY END
          except:
            db.rollback()
            print ('Error: unable to update data in %s table'%main_table_name)
            # logging.info('Error: unable to update data in %s table'%main_table_name)
      cursor.close()
      db.close()
    except (MySQLdb.Error, MySQLdb.Warning) as e:
      print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
      # logging.info('Connect to MSQL database error: %d (%s)'%(e.args[0],e.args[1])
      #return e.args[0]
    
#if order_num_current = 0 -- create first order
#input: bots_list (list of rows (tuples) from bots table)
def process_first_orders(bots_list): #open first orders
  if bots_list:
    table_name = 'transactions'
    main_table_name = 'bots'
    try:
      db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
      cursor = db.cursor()
      for i in range(len(bots_list)):
        user = bots_list[i][0]
        account = bots_list[i][1]
        access = bots_list[i][2]
        strategy = bots_list[i][3]
        enabled = bots_list[i][4]
        balance_total = bots_list[i][5]
        balance_allowed = bots_list[i][6]
        amount_first_order = bots_list[i][7]
        amount_percent_multiplier = bots_list[i][8]
        order_num_current = bots_list[i][9] #ORDERS EXECUTED IN SINGLE CYCLE (int)
        order_num_current_limit = bots_list[i][10] #MAX ORDERS TOTAL (int)
        percent_sell_if_above = bots_list[i][11] #POSITIVE PERCENTAGE VALUE (XX.YY%)
        percent_buy_if_below = bots_list[i][12] # NEGATIVE PERCENTAGE VALUE (-XX.YY%)
        pair = bots_list[i][13]
        pair_x_symbol = bots_list[i][14]
        pair_y_symbol = bots_list[i][15]
        x_symbol_balance_total = bots_list[i][16] 
        price_current = bots_list[i][17] 
        price_first_order = bots_list[i][18]
        buys_amount_total = bots_list[i][19]
        buys_quantity_total = bots_list[i][20]
        last_order_amount = bots_list[i][21]
        last_step_percent = bots_list[i][22]
        profit = bots_list[i][23] # Amount of Y symbol (decimal(20,8))
        if balance_total < balance_allowed:
          balance_allowed = balance_total
        if balance_allowed >= amount_first_order:
          initial_quantity = round(amount_first_order / price_current, 8)
          cur_utime = int(time.time())
          cur_date_string = datetime.datetime.utcfromtimestamp(cur_utime).strftime('%Y-%m-%d %H:%M:%S')
          cur_utime_msec = int(time.time() * 1000)
          new_balance = round(balance_total - amount_first_order, 8)
          new_balance_allowed = round(balance_allowed - amount_first_order, 8)
          x_symbol_balance_total += initial_quantity
          order_num_current += 1
          price_first_order = price_current
          last_step_percent = percent_buy_if_below
          last_order_amount = amount_first_order
          buys_quantity_total = initial_quantity
          buys_amount_total = amount_first_order
          sql = 'UPDATE bots SET price_first_order = %s, balance_total = %s, balance_allowed = %s, x_symbol_balance_total = %s, order_num_current = %s, last_order_amount = %s, last_step_percent = %s, buys_quantity_total = %s, buys_amount_total = %s WHERE user = %s AND account = %s AND strategy = %s AND enabled = %s'
          val_tuple = (price_first_order, new_balance, new_balance_allowed, x_symbol_balance_total, order_num_current, last_order_amount, last_step_percent, buys_quantity_total, buys_amount_total, user, account, strategy, enabled)
          try:
            cursor.execute(sql, val_tuple)
            db.commit()
            #TRANSACTION HISTORY BEGIN
            new_order_id = 'Order ID: %s'%uuid.uuid4().hex.upper()[0:8] #RANDOM ID FOR TESTS #new_order['clientOrderId'] ##id, order_id, order_type, comment, last_profit, pair, price_current, balance, amount_percent_multiplier, balance_allowed, last_order_amount, price_first_order, percent_buy_if_below, order_num_current_limit, percent_sell_if_above, order_num_current, total_sum_of_trades, buys_quantity_total
            sql = 'INSERT INTO {0} ({1}) VALUES ({2})'.format(table_name, ', '.join('{}'.format(TRANSACTIONS_COLUMNS[i]) for i in range(len(TRANSACTIONS_COLUMNS))), ', '.join('{}'.format('%s') for i in range(len(TRANSACTIONS_COLUMNS))))
            val_tuple = (cur_date_string, user, account, 'SELL', pair_y_symbol, amount_first_order, new_balance, new_order_id)
            try:
              cursor.execute(sql, val_tuple)
              db.commit()
            except (MySQLdb.Error, MySQLdb.Warning) as e:
              db.rollback()
              print ('Error: unable to insert data into %s table'%table_name)
              print(e.args[0],e.args[1])
              # logging.info('Error: unable to insert data into %s table'%table_name)
            sql = 'INSERT INTO {0} ({1}) VALUES ({2})'.format(table_name, ', '.join('{}'.format(TRANSACTIONS_COLUMNS[i]) for i in range(len(TRANSACTIONS_COLUMNS))), ', '.join('{}'.format('%s') for i in range(len(TRANSACTIONS_COLUMNS))))
            val_tuple = (cur_date_string, user, account, 'BUY', pair_x_symbol, initial_quantity, x_symbol_balance_total, new_order_id)
            try:
              cursor.execute(sql, val_tuple)
              db.commit()
            except (MySQLdb.Error, MySQLdb.Warning) as e:
              db.rollback()
              print ('Error: unable to insert data into %s table'%table_name)
              print(e.args[0],e.args[1])
              # logging.info('Error: unable to insert data into %s table'%table_name
            #TRANSACTION HISTORY END
          except (MySQLdb.Error, MySQLdb.Warning) as e:
            db.rollback()
            print ('Error: unable to update data in %s table'%main_table_name)
            print(e.args[0],e.args[1])
            # logging.info('Error: unable to update data in %s table'%main_table_name)
      cursor.close()
      db.close()
    except (MySQLdb.Error, MySQLdb.Warning) as e:
      print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
      # logging.info('Connect to MSQL database error: %d (%s)'%(e.args[0],e.args[1])
      #return e.args[0]
 
###############################################SCRIPTS FOR TEST################################################

def update_price_first_order(price, pair):
  table_name = 'bots'
  try:
    db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
    cursor = db.cursor()
    events_sql = 'UPDATE bots SET price_first_order = %s WHERE pair = %s'
    events_val_tuple = (price, pair)
    try:
      cursor.execute(events_sql, events_val_tuple)
      db.commit()
    except (MySQLdb.Error, MySQLdb.Warning) as e:
      db.rollback()
      print ('Error: unable to update data in %s table'%table_name)
      print(e.args[0],e.args[1])
      # logging.info('Error: unable to update data in %s table'%table_name)
  except (MySQLdb.Error, MySQLdb.Warning) as e:
    print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
    # logging.info('Connect to MSQL database error: %d (%s)'%(e.args[0],e.args[1])
    #return e.args[0]

def update_column(table, column, value):
  try:
    db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
    cursor = db.cursor()
    bots_sql = 'UPDATE {0} SET {1} = %s'.format(table, column)
    bots_val_tuple = (value,)
    try:
      cursor.execute(bots_sql, bots_val_tuple)
      db.commit()
    except (MySQLdb.Error, MySQLdb.Warning) as e:
      db.rollback()
      print ('Error: unable to update data in current table')
      print(e.args[0],e.args[1])
      # logging.info('Error: unable to update data in %s table'%bots_name)
  except (MySQLdb.Error, MySQLdb.Warning) as e:
    print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
    # logging.info('Connect to MSQL database error: %d (%s)'%(e.args[0],e.args[1])
    #return e.args[0]

def update_balance_allowed_bots(amount, pair):
  bots_name = 'bots'
  try:
    db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
    cursor = db.cursor()
    bots_sql = 'UPDATE bots SET balance_allowed = %s WHERE pair = %s'
    bots_val_tuple = (amount, pair)
    try:
      cursor.execute(bots_sql, bots_val_tuple)
      db.commit()
    except (MySQLdb.Error, MySQLdb.Warning) as e:
      db.rollback()
      print ('Error: unable to update data in %s table'%bots_name)
      print(e.args[0],e.args[1])
      # logging.info('Error: unable to update data in %s table'%bots_name)
  except (MySQLdb.Error, MySQLdb.Warning) as e:
    print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
    # logging.info('Connect to MSQL database error: %d (%s)'%(e.args[0],e.args[1])
    #return e.args[0]

def update_price_current_bots(price, pair):
  bots_name = 'bots'
  try:
    db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
    cursor = db.cursor()
    bots_sql = 'UPDATE bots SET price_current = %s WHERE pair = %s'
    bots_val_tuple = (price, pair)
    try:
      cursor.execute(bots_sql, bots_val_tuple)
      db.commit()
    except (MySQLdb.Error, MySQLdb.Warning) as e:
      db.rollback()
      print ('Error: unable to update data in %s table'%bots_name)
      print(e.args[0],e.args[1])
      # logging.info('Error: unable to update data in %s table'%bots_name)
  except (MySQLdb.Error, MySQLdb.Warning) as e:
    print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
    # logging.info('Connect to MSQL database error: %d (%s)'%(e.args[0],e.args[1])
    #return e.args[0]

def clear_table(table):
  try:
    db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
    cursor = db.cursor()
    sql = 'DELETE FROM {}'.format(table)
    try:
      cursor.execute(sql)
      db.commit()
    except (MySQLdb.Error, MySQLdb.Warning) as e:
      db.rollback()
      print ('Error: unable to clear current table')
      print(e.args[0],e.args[1])
      # logging.info('Error: unable to delete row in %s table'%table_name)
  except (MySQLdb.Error, MySQLdb.Warning) as e:
    print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
    # logging.info('Connect to table 'bots' of MSQL database error: %d (%s)'%(e.args[0],e.args[1])

def create_test_mysql_bots(num_rows, new_balance, amount_percent_multiplier, amount_first_order, percent_buy_if_below, percent_sell_if_above):
  table_name = 'bots'
  balance_allowed = 100.0
  order_num_current = 0
  order_num_current_limit = 10
  pair = 'X/Y'
  pair_x_symbol = 'X'
  pair_y_symbol = 'Y'
  x_symbol_balance_total = 0.0
  price_current = 100.7777
  price_first_order = 100.7777
  buys_amount_total = 0.0
  buys_quantity_total = 0.0
  last_order_amount = 0.0
  last_step_percent = 0.0
  profit = 0.0
  try:
    db = MySQLdb.connect(CONF_MYSQL_HOST,CONF_MYSQL_USER,CONF_MYSQL_PASS,CONF_MYSQL_DB)
    cursor = db.cursor()
    sql = 'INSERT INTO bots ({0}) VALUES ({1})'.format(', '.join('{}'.format(BOTS_COLUMNS[i]) for i in range(len(BOTS_COLUMNS))), ', '.join('{}'.format('%s') for i in range(len(BOTS_COLUMNS))))
    for i in range(num_rows):
      new_user = uuid.uuid4().hex.upper()[0:8]
      new_account = uuid.uuid4().hex.upper()[0:10]
      cur_utime = int(time.time())
      date = datetime.datetime.utcfromtimestamp(cur_utime).strftime('%Y-%m-%d %H:%M:%S')
      val_tuple = (new_user, new_account, 1, 'long', 1, new_balance, balance_allowed, amount_first_order, amount_percent_multiplier, order_num_current, order_num_current_limit, percent_sell_if_above, percent_buy_if_below, pair, pair_x_symbol, pair_y_symbol, x_symbol_balance_total, price_current, price_first_order, buys_amount_total, buys_quantity_total, last_order_amount, last_step_percent, profit)
      try:
        cursor.execute(sql, val_tuple)
        db.commit()
      except (MySQLdb.Error, MySQLdb.Warning) as e:
        db.rollback()
        print ('Error: unable to insert data into %s table'%table_name)
        print(e.args[0],e.args[1])
        # logging.info('Error: unable to insert data into %s table'%table_name)
    print ('Closing db')
    cursor.close()
    db.close()
  except (MySQLdb.Error, MySQLdb.Warning) as e:
    print ('Connect to MSQL database error %d %s'%(e.args[0],e.args[1]))
    # logging.info('Connect to table 'bots' of MSQL database error: %d (%s)'%(e.args[0],e.args[1])

def get_prices_generator(prices_list):
  price_gen = (x for x in range(len(prices_list)))
  return price_gen

#SCRIPTS FOR TESTS END

if __name__ == '__main__':
  # update_price_first_order(pl[0], 'X/Y') #Update price_first_order column of events table where pair is 'X/Y'
  # update_order_num_current_bots(0) #Update num_active_orders column of the bots table
  # SET DEFAULT VALUES
  # update_column('bots', 'amount_first_order', 10.0)
  # update_column('bots', 'buys_quantity_total', 0.0)
  # update_column('bots', 'profit', 0.0)
  # update_column('bots', 'buys_amount_total', 0.0)
  # update_column('bots', 'last_step_percent', 0.0)
  # update_column('bots', 'last_order_amount', 0.0)
  # update_column('bots', 'order_num_current', 0.0)
  # update_column('bots', 'balance_total', 700.0)
  # update_column('bots', 'balance_allowed', 300.0)
  # update_column('bots', 'x_symbol_balance_total', 0.0)
  # SET DEFAULT VALUES END
  prices = [3550.1, 3500.1, 3450.1, 3400.1, 3350.1, 3300.1, 3250.1, 3200.1]
  #pl = prices
  pl = prices[::-1] #Reversed list
  update_price_current_bots(pl[3], 'X/Y') #Update price column of the bots table where pair is 'X/Y'
  data = mysql_db_get_data_from_bots('long') # Get data from bots table where strategy is 'long'
  # print (data)
  process_first_orders(data[0]) #initial orders
  pg = get_prices_generator(pl[1:]) #Create generator from a prices list
  print ('START--- First order price: %s'%pl[0])
  while True:
    data = mysql_db_get_data_from_bots('long')
    process_auto_trade(data[1])
    index = next(pg)
    print ('Index: %d'%index)
    update_price_current_bots(pl[index], 'X/Y')
    time.sleep(10)
